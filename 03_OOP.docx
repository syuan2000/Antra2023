1. What are the six combinations of access modifier keywords and what do they do?
  - public: the member is accessible from any code that can access the class.
  - private: the member is accessible only from within the class where it is defined.
  - protected: the member is accessible from within the class where it is defined and from within any derived class.
  - internal: the member is accessible from any code in the same assembly (ex: same .exe file).
  - protected internal: the member is accessible from any code in the same assembly and from any derived class, even if the derived class is in a different assembly.
  - private protected: the member is accessible from within the class where it is defined and from within any derived class that is in the same assembly.
2.What is the difference between the static, const, and readonly keywords when applied to a type member?
  - The static keyword indicates that the member belongs to the type itself, rather than to any instance of the type.
  - A const is a compile-time constant that can't be changed. 
  - A readonly member can be set only in the constructor of the type.
3. What does a constructor do?
  - a constructor is a special method that used to initialize an object of a class. It has the same name as the class and no return type.
4. Why is the partial keyword useful?
  - The partial keyword allows a type to be defined in multiple parts, each in a separate file. 
    This is useful for large classes that would be difficult to read and maintain if they were defined in a single file.
5. What is a tuple?
  - tupe is a data structure that can hold multiple values of different types. 
6. What does the C# record keyword do?
  - The record keyword is used to define a data type that has a fixed set of properties.
7. What does overloading and overriding mean?
  - overloading is there're several methods with the same name but different signature
  - overriding is between base and derived classes where the derived class implement the same class from base one in a different way. 
8. What is the difference between a field and a property?
  - A field is a variable that holds data for an instance of a class
  - a property is a method that is used to get or set the value of a field. Properties are often used to provide controlled access to fields.
9. How do you make a method parameter optional?
  -  by specifying a default value for the parameter.
10. What is an interface and how is it different from abstract class?
  - interface is a contract that only have declaration of functionalities(not the definition) that a type must implement later. 
  - a class can use multiple interfaces.
  - it deosn't contain static members
  - interfaces are best for providing common functionality to unrelated cases while abstract class is for related cases
11. What accessibility level are members of an interface?
  - members in interface should only be public and must be implemented by the derived class.
12. True/False. Polymorphism allows derived classes to provide differenty implementations of the same method.
  - True
13. True/False. The override keyword is used to indicate that a method in a derived class is providing its own implementation of a method.
  - True
14. True/False. The new keyword is used to indicate that a method in a derived class is providing its own implementation of a method.
  - True
15. True/False. Abstract methods can be used in a normal (non-abstract) class. 
  - False
16.True/False. Normal (non-abstract) methods can be used in an abstract class. 
  - True
17. True/False. Derived classes can override methods that were virtual in the base class. 
  - True
18. True/False. Derived classes can override methods that were abstract in the base class.
  - True
19. True/False. In a derived class, you can override a method that was neither virtual non abstract in the base class.
  - False
20. True/False. A class that implements an interface does not have to provide an implementation for all of the members of the interface.
  - False
21. True/False. A class that implements an interface is allowed to have other members that arenâ€™t defined in the interface.
  - True
22. True/False. A class can have more than one base class.
  - False
23. True/False. A class can implement more than one interface.
  - True
